name: Deploy Portfolio to Production

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'docs/**'
  pull_request:
    branches: [ master, main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  # Job de valida√ß√£o
  validate:
    name: Validate Files
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check JSON Files
      id: check
      run: |
        echo "Validando arquivos JSON..."
        
        # Validar JSONs
        for file in js/data/*/*.json; do
          if [ -f "$file" ]; then
            echo "Validando: $file"
            if ! python3 -m json.tool "$file" > /dev/null; then
              echo "‚ùå Erro no arquivo JSON: $file"
              exit 1
            fi
          fi
        done
        
        echo "‚úÖ Todos os arquivos JSON s√£o v√°lidos"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

    - name: Validate HTML
      run: |
        echo "Validando estrutura HTML..."
        if [ -f "index.htm" ]; then
          # Verifica√ß√µes b√°sicas de HTML
          if grep -q "<!DOCTYPE" index.htm && grep -q "</html>" index.htm; then
            echo "‚úÖ Estrutura HTML v√°lida"
          else
            echo "‚ùå Estrutura HTML inv√°lida"
            exit 1
          fi
        fi

  # Job principal de deploy
  deploy:
    name: Deploy to FTP
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        environment: [production]
    
    environment:
      name: ${{ matrix.environment }}
      url: ${{ secrets.SITE_URL }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Otimiza√ß√£o de imagens (opcional)
    - name: Optimize Images
      run: |
        echo "Otimizando imagens..."
        
        # Instalar ferramentas de otimiza√ß√£o
        sudo apt-get update
        sudo apt-get install -y jpegoptim optipng
        
        # Otimizar JPEGs
        find . -name "*.jpg" -o -name "*.jpeg" | xargs jpegoptim --max=85 --strip-all
        
        # Otimizar PNGs
        find . -name "*.png" | xargs optipng -o2
        
        echo "‚úÖ Imagens otimizadas"

    # Minifica√ß√£o de CSS e JS (opcional)
    - name: Minify Assets
      run: |
        echo "Minificando assets..."
        
        # Instalar minificadores
        npm install -g clean-css-cli terser html-minifier-terser
        
        # Minificar CSS
        if [ -f "css/style.css" ]; then
          cleancss -o css/style.min.css css/style.css
          echo "‚úÖ CSS minificado"
        fi
        
        # Minificar JavaScript
        if [ -f "js/script.js" ]; then
          terser js/script.js -o js/script.min.js --compress --mangle
          echo "‚úÖ JavaScript minificado"
        fi
        
        # Minificar HTML (opcional)
        if [ -f "index.htm" ]; then
          html-minifier-terser --collapse-whitespace --remove-comments --minify-css --minify-js index.htm -o index.min.htm
          echo "‚úÖ HTML minificado"
        fi

    # Preparar arquivos para deploy
    - name: Prepare Deploy Files
      run: |
        echo "Preparando arquivos para deploy..."
        
        # Criar pasta tempor√°ria para deploy
        mkdir -p deploy-temp
        
        # Copiar apenas arquivos necess√°rios
        cp -r css/ deploy-temp/ 2>/dev/null || true
        cp -r js/ deploy-temp/ 2>/dev/null || true
        cp -r img/ deploy-temp/ 2>/dev/null || true
        cp -r games/ deploy-temp/ 2>/dev/null || true
        cp -r pdf/ deploy-temp/ 2>/dev/null || true
        cp -r videos/ deploy-temp/ 2>/dev/null || true
        cp -r docs/ deploy-temp/ 2>/dev/null || true
        cp index.htm deploy-temp/ 2>/dev/null || true
        cp _default.php deploy-temp/ 2>/dev/null || true
        cp .htaccess-new deploy-temp/.htaccess 2>/dev/null || true
        
        # Usar vers√µes minificadas se existirem
        if [ -f "css/style.min.css" ]; then
          cp css/style.min.css deploy-temp/css/style.css
        fi
        
        if [ -f "js/script.min.js" ]; then
          cp js/script.min.js deploy-temp/js/script.js
        fi
        
        if [ -f "index.min.htm" ]; then
          cp index.min.htm deploy-temp/index.htm
        fi
        
        # Criar arquivo de informa√ß√µes do deploy
        cat > deploy-temp/deploy-info.txt << EOF
        Deploy Information
        ==================
        Date: $(date)
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}
        Workflow: ${{ github.workflow }}
        Run ID: ${{ github.run_id }}
        EOF
        
        echo "üìÅ Arquivos preparados:"
        find deploy-temp -type f | head -20

    # Deploy via FTP com retry
    - name: Deploy to FTP Server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: deploy-temp/
        server-dir: ${{ secrets.FTP_REMOTE_DIR || '/' }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/.vscode/**
          **/README.md
          **/.github/**
          **/*.log
          **/deploy-temp/**
        dangerous-clean-slate: false
        dry-run: false

    # Verifica√ß√£o p√≥s-deploy
    - name: Verify Deployment
      run: |
        echo "Verificando deploy..."
        
        # Verificar se o site est√° acess√≠vel (se URL estiver configurada)
        if [ -n "${{ secrets.SITE_URL }}" ]; then
          echo "Testando conectividade com: ${{ secrets.SITE_URL }}"
          
          # Aguardar um momento para propaga√ß√£o
          sleep 10
          
          # Fazer requisi√ß√£o HTTP
          if curl -f -s -o /dev/null "${{ secrets.SITE_URL }}"; then
            echo "‚úÖ Site est√° acess√≠vel"
          else
            echo "‚ö†Ô∏è Site pode n√£o estar acess√≠vel ainda (pode ser normal logo ap√≥s deploy)"
          fi
        fi

    # Limpeza
    - name: Cleanup
      if: always()
      run: |
        echo "Limpando arquivos tempor√°rios..."
        rm -rf deploy-temp
        rm -f *.min.*
        echo "‚úÖ Limpeza conclu√≠da"

    # Notifica√ß√£o de sucesso
    - name: Success Notification
      if: success()
      run: |
        echo "üéâ Deploy realizado com sucesso!"
        echo "üìÖ Data: $(date)"
        echo "üåê URL: ${{ secrets.SITE_URL || 'Configurar SITE_URL nos secrets' }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üë§ Por: ${{ github.actor }}"
        echo "üîó Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Job de notifica√ß√£o em caso de falha
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: failure()
    
    steps:
    - name: Failure Notification
      run: |
        echo "‚ùå Deploy falhou!"
        echo "üîç Detalhes:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Actor: ${{ github.actor }}"
        echo "  - Workflow: ${{ github.workflow }}"
        echo "üîó Ver logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"