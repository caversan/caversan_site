name: Deploy Portfolio to FTP

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'For√ßar deploy mesmo sem mudan√ßas'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: Deploy to FTP Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Validate Files Before Deploy
      run: |
        echo "üîç Validando arquivos antes do deploy..."
        
        # Validar JSONs
        echo "Validando arquivos JSON..."
        for file in js/data/*/*.json; do
          if [ -f "$file" ]; then
            echo "Validando: $file"
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
              echo "‚ùå Erro no arquivo JSON: $file"
              exit 1
            fi
          fi
        done
        echo "‚úÖ Arquivos JSON v√°lidos"
        
        # Validar HTML b√°sico
        if [ -f "index.htm" ]; then
          if grep -q "<!DOCTYPE" index.htm && grep -q "</html>" index.htm; then
            echo "‚úÖ Estrutura HTML v√°lida"
          else
            echo "‚ùå Estrutura HTML inv√°lida"
            exit 1
          fi
        fi

    - name: Prepare Files for Deploy
      run: |
        echo "üì¶ Preparando arquivos para deploy..."
        
        # Listar arquivos que ser√£o enviados
        echo "Arquivos principais:"
        ls -la *.htm *.php 2>/dev/null || echo "Nenhum arquivo HTML/PHP na raiz"
        
        echo "Pastas que ser√£o enviadas:"
        ls -la | grep "^d" | awk '{print $9}' | grep -v "^\.$\|^\.\.$\|^\.git$\|^\.github$" || echo "Nenhuma pasta adicional"
        
        # Criar arquivo de informa√ß√µes do deploy
        echo "Criando arquivo de informa√ß√µes do deploy..."
        cat > deploy-info.txt << EOF
        Portfolio Deploy Information
        ============================
        Deploy Date: $(date)
        Commit SHA: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Deployed by: ${{ github.actor }}
        Workflow Run: ${{ github.run_id }}
        Repository: ${{ github.repository }}
        EOF

    - name: Check FTP Secrets
      run: |
        echo "üîê Verificando configura√ß√£o dos secrets FTP..."
        
        if [ -z "${{ secrets.FTP_SERVER }}" ]; then
          echo "‚ùå FTP_SERVER n√£o configurado"
          echo "Configure em: Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        else
          echo "‚úÖ FTP_SERVER configurado"
        fi
        
        if [ -z "${{ secrets.FTP_USERNAME }}" ]; then
          echo "‚ùå FTP_USERNAME n√£o configurado"
          exit 1
        else
          echo "‚úÖ FTP_USERNAME configurado"
        fi
        
        if [ -z "${{ secrets.FTP_PASSWORD }}" ]; then
          echo "‚ùå FTP_PASSWORD n√£o configurado"
          exit 1
        else
          echo "‚úÖ FTP_PASSWORD configurado"
        fi
        
        echo "üéâ Todos os secrets FTP est√£o configurados!"

    - name: Deploy to FTP Server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        port: ${{ secrets.FTP_PORT || 21 }}
        protocol: ${{ secrets.FTP_PROTOCOL || 'ftp' }}
        local-dir: ./
        server-dir: ${{ secrets.FTP_REMOTE_DIR || '/' }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/.vscode/**
          **/README.md
          **/.github/**
          **/DEPLOY.md
          **/validate.*
          **/*.log
          **/package*.json
        dangerous-clean-slate: false
        dry-run: false

    - name: Post Deploy Verification
      if: success()
      run: |
        echo "üîç Verificando deploy..."
        
        # Se houver URL configurada, testar conectividade
        if [ -n "${{ secrets.SITE_URL }}" ]; then
          echo "Testando conectividade com: ${{ secrets.SITE_URL }}"
          sleep 5  # Aguardar propaga√ß√£o
          
          if curl -f -s -o /dev/null "${{ secrets.SITE_URL }}"; then
            echo "‚úÖ Site est√° acess√≠vel"
          else
            echo "‚ö†Ô∏è Site pode n√£o estar acess√≠vel ainda (normal logo ap√≥s deploy)"
          fi
        else
          echo "‚ÑπÔ∏è SITE_URL n√£o configurado - pulando teste de conectividade"
        fi

    - name: Deploy Success Notification
      if: success()
      run: |
        echo "üéâ Deploy realizado com sucesso!"
        echo "=========================================="
        echo "üìÖ Data: $(date)"
        echo "üåê Site: ${{ secrets.SITE_URL || 'Configure SITE_URL nos secrets' }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üë§ Deploy por: ${{ github.actor }}"
        echo "üîó Workflow: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "=========================================="

    - name: Deploy Failure Notification
      if: failure()
      run: |
        echo "‚ùå Deploy falhou!"
        echo "=========================================="
        echo "üîç Verifique os logs acima para detalhes"
        echo "üìù Commit que falhou: ${{ github.sha }}"
        echo "üë§ Tentativa por: ${{ github.actor }}"
        echo "üîó Logs detalhados: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "=========================================="
        echo ""
        echo "üí° Poss√≠veis solu√ß√µes:"
        echo "1. Verifique se todos os secrets FTP est√£o corretos"
        echo "2. Confirme se o servidor FTP est√° acess√≠vel"
        echo "3. Verifique se o diret√≥rio de destino existe"
        echo "4. Valide os arquivos JSON localmente"